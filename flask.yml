---
- hosts: local
  connection: local
  gather_facts: false
  vars_files:
    - vars.yml
    - /home/ec2-user/ansible/aws_keys.yml
  tasks:
    - name: Create security group for EC2
      ec2_group:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        name: "{{ security_group }}"
        description: Webservers security group
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: sg

    - name: Create the ELB listening on port 3000
      ec2_elb_lb:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        name: "{{ load_balancer }}"
        state: present
        region: "{{ region }}"
        zones:
          - "{{ region }}a"
        listeners:
          - protocol: http
            load_balancer_port: 3000
            instance_port: 3000
        health_check:
          ping_protocol: http
          ping_port: 3000
          ping_path: "/"
          response_timeout: 5
          interval: 10
          unhealthy_threshold: 10
          healthy_threshold: 2
        tags: "{{ infra_tags }}"
      register: elb

    - name: Launch new EC2 instances Upgrade to "ec2_instance" module
      ec2_instance:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        groups: 
          - "{{ sg.group_id }}"
          - "{{ elb.elb.security_group_ids | first }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        wait: true 
        region: "{{ region }}"
        keypair: "{{ keypair }}"
        count: "{{ count }}"
        instance_tags: "{{ infra_tags }}"
      register: ec2

    - name: Add EC2 instances to inventory
      add_host:
        name: "{{ item.public_ip }}"
        groups: remote
      loop: "{{ ec2.instances }}"
    - name: Wait for SSH to come up
      wait_for_connection:
        delay: 60
        timeout: 120
      loop: "{{ ec2.instances }}"

- hosts: remote
  remote_user: ec2-user
  become: yes
  become_method: sudo
  gather_facts: yes
  vars_files:
    - vars.yml
  tasks:
    - name: Add Docker GPG key
      get_url:
        url: https://download.docker.com/linux/centos/gpg
        dest: /etc/yum.repos.d/docker-gpg
        mode: 0644
    - name: Install docker prerequisites
      yum:
        name: "{{ item }}"
        state: latest
        with_items:
        - yum-utils
        - device-mapper-persistent-data
        - lvm2
    - name: "Configuring docker-ce repo"
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
        mode: 0644
    - name: Install Docker packages
      yum:
        name: ['docker-ce','docker-ce-cli']
        state: present
    - name: " Starting and Enabling Docker service"
      service:
        name: docker
        state: started
        enabled: yes
    - name: Install Docker-compose 
      shell: 
        cmd: curl -L "https://github.com/docker/compose/releases/download/2.3.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        warn: false

    - name: Install packages
      yum:  # name={{item}} state=present
        loop:
        - python
        - python3
        - python-devel
        - python-setuptools
        - python3-pip
        - nginx
        - git
    - name: Pip setup for ansible
      pip:
        name: 
        - boto3
        - boto
        - docker
        - docker-compose
        - flask-mysqldb

    - name: git pull IFotos
  #    copy:
  #      src: python/
  #      dest: /home/{{ user }}/{{ app_name }}
      git:
        repo: https://github.com/ifriedman7/IFotos.git

    - name: Run the container
      docker_compose:
        project_src: /home/{{ user }}/{{ app_exe }}
        state: present

    - name: Create nginx config
      template:
        src: nginx.j2
        dest: /etc/nginx/sites-available/{{ app_name }}
    - name: Remove default nginx site config
      file: path=/etc/nginx/sites-enabled/default state=absent
    - name: Enable nginx site
      file:
        src: /etc/nginx/sites-available/{{ app_name }}
        dest: /etc/nginx/sites-enabled/default
        state: link
        force: yes
    - name: Restart nginx
      systemd: name=nginx state=restarted enabled=yes
 
- hosts: local
  connection: local
  gather_facts: False
  vars_files:
    - vars.yml  
    - aws_keys.yml
  tasks:
    - name: Attach EC2 instance to ELB
      ec2_elb:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        state: present
        ec2_elbs: "{{ load_balancer }}"
        region: "{{ region }}"
        instance_id: "{{ item.id }}"
      loop: "{{ ec2.instances }}"

    - name: Check that application is reachable through ELB
      uri:
        url: "http://{{ elb.elb.dns_name }}"

    - debug:
        msg: "Website reachable on http://{{ elb.elb.dns_nameÂ }}"