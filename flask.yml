---
- hosts: local
  connection: local
  gather_facts: false
  vars_files:
    - vars.yml
    - /home/ec2-user/ansible/aws_keys.yml
  tasks:
    - name: Create security group for EC2
      ec2_group:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        name: "{{ security_group }}"
        description: "ssh 22 security group"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: sg

    - name: Create the ELB listening on port 3000
      elb_classic_lb:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        name: "{{ load_balancer }}"
        state: present
        region: "{{ region }}"
        zones:
          - "{{ region }}a"
        listeners:
          - protocol: http
            load_balancer_port: 3000
            instance_port: 3000
        health_check:
          ping_protocol: http
          ping_port: 3000
          ping_path: "/"
          response_timeout: 5
          interval: 10
          unhealthy_threshold: 10
          healthy_threshold: 2
        tags: "{{ infra_tags }}"
      register: elb

    - name: Launch new EC2 instances Upgrade to "ec2_instance" module
      ec2_instance:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        name: "IFotos Instance"
        network:
          groups: 
          - "{{ sg.group_id }}"
          - "{{ elb.elb.security_group_ids | first }}"
        security_groups:
        - "{{ sg.group_id }}"
        - "{{ elb.elb.security_group_ids | first }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ image }}"
        wait: true 
        region: "{{ region }}"
        key_name: "{{ keypair }}"
        # count: "{{ count }}" no longer supported
        tags: "{{ infra_tags }}"
      register: ec2

    - name: Add EC2 instances to inventory
      add_host:
        name: "{{ item.public_ip_address }}"
        groups: remote
      loop: "{{ ec2.instances }}"
    - name: Wait for SSH to come up
      wait_for_connection:
        delay: 60
        timeout: 120
      loop: "{{ ec2.instances }}"

- hosts: remote
  remote_user: maintuser
  become: yes
  become_method: sudo
  gather_facts: yes
  vars_files:
    - vars.yml
  tasks:
    - name: "Download EPEL RPM"
      get_url:
        url: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
        dest: ./epel-release-latest-7.noarch.rpm
        mode: 0644
    - name: Install epel-release 
      shell: 
        cmd: sudo rpm -Uvh --replacepkgs ./epel-release-latest-7.noarch.rpm
        warn: false

    - name: Install docker prerequisites
      yum:
        name: 
          - yum-utils
          - device-mapper-persistent-data
          - lvm2
          - epel-release
          - libcurl-devel
          - python
          - python-devel
          - python3-devel
          - python-pip
          - python2-pip
          - python-setuptools
          - nginx
          - git
          - libselinux-python
          - python3
          - python3-pip
          - libselinux-python3
          - python-virtualenv
        state: present
        update_cache: yes
        enablerepo: epel
        skip_broken: yes
    - name: Upgrade all packages
      yum:
        name: 
          - '*'
        state: latest
    - name: Add Docker GPG key
      get_url:
        url: https://download.docker.com/linux/centos/gpg
        dest: /etc/yum.repos.d/docker-gpg
        mode: 0644

    - name: "Configuring docker-ce repo"
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
        mode: 0644
    - name: Install Docker packages
      yum:
        name: ['docker-ce','docker-ce-cli']
        state: present
    - name: " Starting and Enabling Docker service"
      service:
        name: docker
        state: started
        enabled: yes

    - name: Add Mysql GPG key
      shell:
        cmd: sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022
        warn: false
        
    - name: Install Mysql repo
      shell:
        cmd: sudo rpm -ivh --replacepkgs https://repo.mysql.com/mysql80-community-release-el7-3.noarch.rpm
        warn: false
    - name: Configure Mysql repo - Disable all
      shell:
        cmd: sed -i 's/enabled=1/enabled=0/' /etc/yum.repos.d/mysql-community.repo
        warn: false
    - name: Install mysql community server
      yum:
        name: 
          - mysql-devel
          - mysql
          - mysql-common
          - mysql-libs
  #        - MySQL-python
 #         - libmysqlclient-devel
          - gcc
          - mysql-community-server
        state: present
        enablerepo: mysql57-community
 #   - name: Starting and Enabling mysql service (in container)
  #    service:
   #     name: mysqld
  #      state: started
  #      enabled: yes

    - name: Install Docker-compose 
      shell: 
        cmd: curl -L "https://github.com/docker/compose/releases/download/2.3.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        warn: false

 #   - name: Install packages
 #     yum:  # name={{item}} state=present
 #       name:
 #   - name: Upgrade pip2 
 #     shell: 
 #       cmd: pip install -U pip
  #      warn: false

    - name: Pip setup for ansible
      pip:
        name: 
          - setuptools==44.1.1 # 20.3.1
          - pip==20.3.4 # 20.3.1
          - wheel==0.36.2
 #         - boto3
          - selinux
        state: latest
        extra_args: --disable-pip-version-check --no-cache-dir 
    - name: Pip setup for python3
      pip:
        name:
          - Flask
 #         - mysqlclient
          - pymysql
          - Flask-MySQLdb
          - docker
          - docker-compose
          - flask-mysqldb
        state: latest  
   #     virtualenv: /home/{{ user }}/{{ app_name }}
   #     virtualenv_python: python3.6
   #     virtualenv_site_packages: yes
        executable: /usr/bin/pip3
    - name: git pull IFotos
  #    copy:
  #      src: python/
  #      dest: /home/{{ user }}/{{ app_name }}
      git:
        repo: https://github.com/ifriedman7/IFotos.git

    - name: Run the container
      docker_compose:
        project_src: /home/{{ user }}/{{ app_exe }}
        state: present

    - name: Create nginx config
      template:
        src: nginx.j2
        dest: /etc/nginx/sites-available/{{ app_name }}
    - name: Remove default nginx site config
      file: path=/etc/nginx/sites-enabled/default state=absent
    - name: Enable nginx site
      file:
        src: /etc/nginx/sites-available/{{ app_name }}
        dest: /etc/nginx/sites-enabled/default
        state: link
        force: yes
    - name: Restart nginx
      systemd: name=nginx state=restarted enabled=yes
 
- hosts: local
  connection: local
  gather_facts: False
  vars_files:
    - vars.yml  
    - aws_keys.yml
  tasks:
    - name: Attach EC2 instance to ELB
      ec2_elb:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        state: present
        ec2_elbs: "{{ load_balancer }}"
        region: "{{ region }}"
        instance_id: "{{ item.id }}"
      loop: "{{ ec2.instances }}"

    - name: Check that application is reachable through ELB
      uri:
        url: "http://{{ elb.elb.dns_name }}"

    - debug:
        msg: "Website reachable on http://{{ elb.elb.dns_nameÂ }}"